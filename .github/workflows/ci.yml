name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  secrets-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITLEAKS_ENABLE_UPLOAD_ARTIFACT: true
          GITLEAKS_ENABLE_SUMMARY: true

  api:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: api/requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff pip-audit
      - name: Lint (ruff)
        run: ruff check .
      - name: Run tests (Django)
        env:
          DEBUG: '1'
          SECRET_KEY: test
        run: |
          python manage.py test -v 2 \
            accounts.tests.test_health \
            billing.tests.test_quota \
            billing.tests.test_usage \
            billing.tests.test_webhooks \
            exports.tests.test_determinism \
            orgs.tests.test_invites \
            billing.tests.test_seats \
            billing.tests.test_bundles_and_seats \
            billing.tests.test_enterprise_allocations \
            billing.tests.test_portal \
            ai.tests.test_sanitize \
            ai.tests.test_sanitize_file_refs \
            ai.tests.test_provider_composite \
            ai.tests.test_file_refs_prompting \
            ai.tests.test_views_format \
            ai.tests.test_metrics \
            exports.tests.test_escape \
            files.tests.test_uploads_security

  api-postgres-rls:
    name: API (Postgres RLS)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: gs
          POSTGRES_PASSWORD: gs
          POSTGRES_DB: granterstellar
        options: >-
          --health-cmd "pg_isready -U gs -d granterstellar" \
          --health-interval 5s \
          --health-timeout 5s \
          --health-retries 10
    defaults:
      run:
        working-directory: api
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: api/requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h 127.0.0.1 -p 5432 || true
            python - <<'PY'
import socket, sys
sock = socket.socket()
try:
    sock.connect(("127.0.0.1", 5432))
    sys.exit(0)
except Exception:
    sys.exit(1)
PY
            if [ "$?" -eq 0 ]; then echo "Postgres ready"; break; fi
            sleep 1
          done
      - name: Migrate (Postgres)
        env:
          DEBUG: '1'
          SECRET_KEY: test
          DATABASE_URL: postgres://gs:gs@postgres:5432/granterstellar
        run: python manage.py migrate --noinput
      - name: Run RLS tests (Postgres-only)
        env:
          DEBUG: '1'
          SECRET_KEY: test
          DATABASE_URL: postgres://gs:gs@postgres:5432/granterstellar
        run: |
          python manage.py test -v 2 \
            db_policies.tests.test_rls_policies \
            db_policies.tests.test_rls_matrix

  api-audit:
    runs-on: ubuntu-latest
    needs: api
    defaults:
      run:
        working-directory: api
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit
      - name: pip-audit (requirements)
        run: pip-audit -r requirements.txt

  web:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
      - name: Install
        run: npm ci
      - name: Lint (eslint)
        run: npm run lint --silent
      - name: Test (vitest)
        run: npm run test --silent

  web-audit:
    runs-on: ubuntu-latest
    needs: web
    defaults:
      run:
        working-directory: web
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install (production deps for audit)
        run: |
          if [ -f package-lock.json ]; then npm ci --omit=dev; else npm install --production --no-audit --no-fund; fi
      - name: npm audit (fail on high+)
        run: npm audit --audit-level=high

  image-build:
    runs-on: ubuntu-latest
    needs: [api, web]
    steps:
      - uses: actions/checkout@v4
      - name: Docker build (API + SPA)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: api/Dockerfile
          push: false