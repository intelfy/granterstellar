name: Dependency & Security Audit

on:
  schedule:
    - cron: '0 3 * * 1' # Weekly Monday 03:00 UTC
  workflow_dispatch: {}
  pull_request:
    paths:
      - 'api/**'
      - 'web/**'
      - 'scripts/deps_audit.sh'
      - '.github/workflows/deps_audit.yml'

jobs:
  python-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.12'
      - name: Install prod deps
        working-directory: api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Install dev audit deps
        working-directory: api
        run: |
          pip install -r requirements-dev.txt || true
      - name: pip-audit
        working-directory: api
        run: |
          pip-audit -f json -o pip-audit-report.json || true
      - name: Bandit security scan
        working-directory: api
        run: |
          bandit -q -r . -f json -o bandit-report.json || true
      - name: CycloneDX SBOM
        working-directory: api
        run: |
          cyclonedx-bom -o sbom-python.json || true
      - name: Upload Python artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-security-artifacts
          path: |
            api/pip-audit-report.json
            api/bandit-report.json
            api/sbom-python.json
          if-no-files-found: ignore

  node-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
      - name: Install dependencies
        working-directory: web
        run: |
          npm ci || npm install
      - name: npm audit (prod)
        working-directory: web
        run: |
          npm audit --omit=dev --json > npm-audit-prod.json || true
      - name: npm audit (full)
        working-directory: web
        run: |
          npm audit --json > npm-audit-full.json || true
      - name: CycloneDX SBOM
        working-directory: web
        run: |
          npx @cyclonedx/cyclonedx-npm --output-format json --output-file sbom-node.json || true
      - name: Upload Node artifacts
        uses: actions/upload-artifact@v4
        with:
          name: node-security-artifacts
          path: |
            web/npm-audit-prod.json
            web/npm-audit-full.json
            web/sbom-node.json
          if-no-files-found: ignore

  gate-severity:
    needs: [python-audit, node-audit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          path: audits
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Parse & fail on HIGH/CRITICAL (precise)
        run: |
          set -euo pipefail
          echo "Evaluating security artifacts with precise severity parsing..."

          PY_PIP_AUDIT="audits/python-security-artifacts/pip-audit-report.json"
          PY_BANDIT="audits/python-security-artifacts/bandit-report.json"
          NODE_AUDIT_FULL="audits/node-security-artifacts/npm-audit-full.json"

          high_total=0
          critical_total=0

          # pip-audit JSON: list of objects with advisory and severity (may vary by version). Handle both list and object styles.
          if [ -f "$PY_PIP_AUDIT" ]; then
            pip_high=$(jq '[.[] | select(.vulns[]? .severity? // .advisory.severity? | ascii_upcase == "HIGH" or .advisory.severity? | ascii_upcase == "HIGH")] | length' "$PY_PIP_AUDIT" 2>/dev/null || echo 0)
            pip_critical=$(jq '[.[] | select(.vulns[]? .severity? // .advisory.severity? | ascii_upcase == "CRITICAL" or .advisory.severity? | ascii_upcase == "CRITICAL")] | length' "$PY_PIP_AUDIT" 2>/dev/null || echo 0)
            high_total=$((high_total + pip_high))
            critical_total=$((critical_total + pip_critical))
            echo "pip-audit: HIGH=$pip_high CRITICAL=$pip_critical"
          fi

          # Bandit: severity in results[].issue_severity (LOW/MEDIUM/HIGH)
            if [ -f "$PY_BANDIT" ]; then
              bandit_high=$(jq '[.results[]? | select(.issue_severity == "HIGH")] | length' "$PY_BANDIT" 2>/dev/null || echo 0)
              # Bandit has no CRITICAL level; treat HIGH only.
              high_total=$((high_total + bandit_high))
              echo "Bandit: HIGH=$bandit_high"
            fi

          # npm audit full: vulnerabilities object with severities counts (new audit format); fallback to advisories if older.
          if [ -f "$NODE_AUDIT_FULL" ]; then
            node_high=$(jq '.vulnerabilities.high? // 0' "$NODE_AUDIT_FULL" 2>/dev/null || echo 0)
            node_critical=$(jq '.vulnerabilities.critical? // 0' "$NODE_AUDIT_FULL" 2>/dev/null || echo 0)
            # Older format: try advisories list
            if [ "$node_high" = "0" ] && [ "$node_critical" = "0" ]; then
              node_high=$(jq '[.advisories[]? | select(.severity == "high")] | length' "$NODE_AUDIT_FULL" 2>/dev/null || echo 0)
              node_critical=$(jq '[.advisories[]? | select(.severity == "critical")] | length' "$NODE_AUDIT_FULL" 2>/dev/null || echo 0)
            fi
            high_total=$((high_total + node_high))
            critical_total=$((critical_total + node_critical))
            echo "npm audit: HIGH=$node_high CRITICAL=$node_critical"
          fi

          echo "Aggregate: HIGH=$high_total CRITICAL=$critical_total"
          if [ "$critical_total" -gt 0 ] || [ "$high_total" -gt 0 ]; then
            echo "::error::Failing build due to HIGH/CRITICAL vulnerabilities (high=$high_total critical=$critical_total).";
            exit 1
          fi
          echo "No HIGH/CRITICAL vulnerabilities detected."