services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - media:/app/media
      - backups:/backups
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request,sys;\n\ntry:\n urllib.request.urlopen('http://localhost:8000/healthz', timeout=3)\n sys.exit(0)\nexcept Exception:\n sys.exit(1)\" "]
      interval: 15s
      timeout: 5s
      retries: 10

  web:
    working_dir: /app/web
    image: node:20-alpine
    command: sh -c "npm ci && npm run dev"
    volumes:
      - .:/app
    ports:
      - "5174:5174"
    depends_on:
      - api

  worker:
    build:
      context: .
      dockerfile: api/Dockerfile
    command: bash -c "celery -A app.celery:app worker -l info"
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  beat:
    build:
      context: .
      dockerfile: api/Dockerfile
    command: bash -c "while true; do python manage.py enforce_subscription_periods; sleep 86400; done"
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_healthy

  backup:
    image: alpine:3.20
    entrypoint: sh -c "apk add --no-cache postgresql16-client >/dev/null && sleep 10 && while true; do /app/scripts/pg_dump_daily.sh; sleep 86400; done"
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - backups:/backups
      - .:/app:ro
    depends_on:
      db:
        condition: service_healthy

volumes:
  db-data:
  media:
  backups: